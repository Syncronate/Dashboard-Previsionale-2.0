# Nome del workflow, visibile nella tab "Actions" di GitHub
name: Esegui Script Previsione Idrometrica

# Trigger: quando eseguire questo workflow
on:
  # Permette di lanciare il workflow manualmente dalla UI di GitHub
  workflow_dispatch:

  # Esegue il workflow a intervalli regolari
  # Questo esempio lo esegue ogni 30 minuti
  schedule:
    - cron: '*/30 * * * *'

# Definizione dei task (job) da eseguire
jobs:
  run-prediction-script:
    # Il tipo di runner su cui verr√† eseguito il job
    runs-on: ubuntu-latest

    # I passaggi (step) che compongono il job
    steps:
      # 1. Fa il checkout del tuo codice dal repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Imposta l'ambiente Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      # 3. Installa le dipendenze Python necessarie
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # <<< BLOCCO DI DEBUG AGGIUNTO >>>
      - name: DEBUG - List files in models directory
        run: |
          echo "Verifico il contenuto della cartella 'models'..."
          ls -l models/
          
      - name: DEBUG - Show content of JSON file
        run: |
          echo "Mostro il contenuto RAW del file JSON..."
          echo "--- INIZIO CONTENUTO FILE ---"
          cat models/modello_lstm_20250623_2039.json
          echo "--- FINE CONTENUTO FILE ---"
      # <<< FINE BLOCCO DI DEBUG >>>

      # 4. Esegue lo script Python
      - name: Run prediction script
        run: python Previsione_idro.py
        env:
          # Imposta le variabili d'ambiente necessarie allo script
          # Queste sono prese dai "Secrets" del tuo repository GitHub per sicurezza
          GSHEET_ID: ${{ secrets.GSHEET_ID }}
          GCP_SA_KEY_BASE64_FALLBACK: ${{ secrets.GCP_SA_KEY_BASE64 }}
